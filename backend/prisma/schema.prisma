// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id            String    @id @default(uuid())
  steamId       String?   @unique
  email         String?   @unique
  username      String    @unique
  displayName   String?
  password      String?
  avatar        String?
  balance       Float     @default(0)
  level         Int       @default(1)
  xp            Int       @default(0)
  rank          String    @default("Bronze")
  country       String?
  isVerified    Boolean   @default(false)
  isActive      Boolean   @default(true)
  isBanned      Boolean   @default(false)
  banReason     String?
  banExpiresAt  DateTime?
  role          String    @default("user")
  lastLogin     DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relacionamentos
  hostedRooms       GameRoom[]        @relation("HostedRooms")
  roomParticipations RoomParticipant[] @relation("UserParticipations")
  quizResults       QuizResult[]      @relation("UserResults")
  quizAnswers       QuizAnswer[]      @relation("UserParticipations")
  transactions      Transaction[]     @relation("UserTransactions")
  achievements      UserAchievement[] @relation("UserAchievements")
  reportsMade       Report[]          @relation("ReportsMade")
  reportsReceived   Report[]          @relation("ReportsReceived")
  chatMessages      ChatMessage[]     @relation("UserMessages")
  friendshipsInitiated Friendship[]   @relation("FriendshipsInitiated")
  friendshipsReceived Friendship[]    @relation("FriendshipsReceived")

  @@map("users")
}

model GameRoom {
  id            String    @id @default(uuid())
  name          String
  description   String?
  category      String
  difficulty    String
  entryFee      Float     @default(0)
  prizePool     Float     @default(0)
  maxPlayers    Int       @default(10)
  timePerQuestion Int      @default(15)
  questionCount Int       @default(10)
  status        String    @default("waiting")
  isPrivate     Boolean   @default(false)
  password      String?
  startTime     DateTime?
  endTime       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  hostId        String
  tournamentId  String?

  // Relacionamentos
  host          User             @relation("HostedRooms", fields: [hostId], references: [id])
  tournament    Tournament?      @relation(fields: [tournamentId], references: [id])
  participants  RoomParticipant[] @relation("RoomParticipants")
  quiz          Quiz?            @relation("RoomQuiz")

  @@map("game_rooms")
}

model RoomParticipant {
  id        String    @id @default(uuid())
  isReady   Boolean   @default(false)
  joinedAt  DateTime  @default(now())
  leftAt    DateTime?
  isActive  Boolean   @default(true)
  userId    String
  gameRoomId String

  // Relacionamentos
  user      User      @relation("UserParticipations", fields: [userId], references: [id])
  gameRoom  GameRoom  @relation("RoomParticipants", fields: [gameRoomId], references: [id])

  @@unique([userId, gameRoomId])
  @@map("room_participants")
}

model Quiz {
  id              String    @id @default(uuid())
  status          String    @default("waiting")
  currentQuestion Int       @default(0)
  startTime       DateTime?
  endTime         DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  gameRoomId      String    @unique

  // Relacionamentos
  gameRoom        GameRoom  @relation("RoomQuiz", fields: [gameRoomId], references: [id])
  questions        QuizQuestion[] @relation("QuizQuestions")
  results          QuizResult[]   @relation("QuizResults")

  @@map("quizzes")
}

model QuizQuestion {
  id            String    @id @default(uuid())
  questionText  String
  option1       String
  option2       String
  option3       String
  option4       String
  correctAnswer Int
  image         String?
  category      String
  difficulty    String
  points        Int       @default(100)
  timeLimit     Int       @default(15)
  order         Int
  createdAt     DateTime  @default(now())
  quizId        String

  // Relacionamentos
  quiz          Quiz        @relation("QuizQuestions", fields: [quizId], references: [id])
  answers       QuizAnswer[] @relation("QuestionAnswers")

  @@map("quiz_questions")
}

model QuizAnswer {
  id             String    @id @default(uuid())
  selectedAnswer Int?
  isCorrect      Boolean   @default(false)
  points         Int       @default(0)
  timeSpent      Int
  answeredAt     DateTime  @default(now())
  userId         String
  questionId     String
  resultId       String

  // Relacionamentos
  user           User         @relation("UserParticipations", fields: [userId], references: [id])
  question       QuizQuestion  @relation("QuestionAnswers", fields: [questionId], references: [id])
  result         QuizResult    @relation("ResultAnswers", fields: [resultId], references: [id])

  @@map("quiz_answers")
}

model QuizResult {
  id             String    @id @default(uuid())
  totalScore     Int       @default(0)
  correctAnswers Int       @default(0)
  totalQuestions Int       @default(0)
  position       Int?
  prizeWon       Float     @default(0)
  completedAt    DateTime  @default(now())
  userId         String
  quizId         String

  // Relacionamentos
  user           User        @relation("UserResults", fields: [userId], references: [id])
  quiz           Quiz        @relation("QuizResults", fields: [quizId], references: [id])
  answers        QuizAnswer[] @relation("ResultAnswers")

  @@unique([userId, quizId])
  @@map("quiz_results")
}

model Transaction {
  id            String    @id @default(uuid())
  type          String
  amount        Float
  status        String    @default("pending")
  description   String?
  paymentMethod String?
  externalId    String?
  metadataJson  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  userId        String

  // Relacionamentos
  user          User      @relation("UserTransactions", fields: [userId], references: [id])

  @@map("transactions")
}

model Tournament {
  id              String    @id @default(uuid())
  name            String
  description     String?
  type            String
  entryFee        Float     @default(0)
  prizePool       Float     @default(0)
  maxParticipants Int       @default(100)
  status          String    @default("scheduled")
  startTime       DateTime
  endTime         DateTime?
  isRecurring     Boolean   @default(false)
  recurringPattern String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relacionamentos
  gameRooms       GameRoom[] @relation

  @@map("tournaments")
}

model Achievement {
  id          String    @id @default(uuid())
  name        String    @unique
  description String
  icon        String?
  category    String
  points      Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())

  // Relacionamentos
  userAchievements UserAchievement[] @relation("AchievementUsers")

  @@map("achievements")
}

model UserAchievement {
  id            String    @id @default(uuid())
  unlockedAt    DateTime  @default(now())
  userId        String
  achievementId String

  // Relacionamentos
  user          User        @relation("UserAchievements", fields: [userId], references: [id])
  achievement   Achievement @relation("AchievementUsers", fields: [achievementId], references: [id])

  @@unique([userId, achievementId])
  @@map("user_achievements")
}

model Report {
  id              String    @id @default(uuid())
  reason          String
  description     String?
  status          String    @default("pending")
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  reportedById    String
  reportedUserId  String

  // Relacionamentos
  reportedBy      User      @relation("ReportsMade", fields: [reportedById], references: [id])
  reportedUser    User      @relation("ReportsReceived", fields: [reportedUserId], references: [id])

  @@map("reports")
}

model ChatMessage {
  id        String    @id @default(uuid())
  content   String
  type      String    @default("text")
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  userId    String

  // Relacionamentos
  user      User      @relation("UserMessages", fields: [userId], references: [id])

  @@map("chat_messages")
}

model Friendship {
  id        String    @id @default(uuid())
  status    String    @default("pending")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  userId    String
  friendId  String

  // Relacionamentos
  user      User      @relation("FriendshipsInitiated", fields: [userId], references: [id])
  friend    User      @relation("FriendshipsReceived", fields: [friendId], references: [id])

  @@unique([userId, friendId])
  @@map("friendships")
}

model Question {
  id            String    @id @default(uuid())
  text          String
  option1       String
  option2       String
  option3       String
  option4       String
  correctAnswer Int
  image         String?
  category      String
  difficulty    String
  tagsJson      String?
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("questions")
}